{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{%
  set classes = [
    node_type ~ '-contact'|clean_class
  ]
%}

<div{{ attributes.addClass(classes) }}>
  {% if content.field_contact_data['#items'].0.entity.hastranslation(language) %}
    {% set entity = content.field_contact_data['#items'].0.entity.translation(language) %}
  {% else %}
    {% set entity = content.field_contact_data['#items'].0.entity %}
  {% endif %}
  {% if entity.field_fax is not empty %}
    {% set fax_label = entity.field_fax.first %}
  {% else %}
    {% set fax_label = NULL  %}
  {% endif %}
  {% if entity.field_phone is not empty %}
    {% set phone_label = entity.field_phone.first %}
  {% else %}
    {% set phone_label = NULL  %}
  {% endif %}
  {% include "@organisms/contact/contact.twig" with {
    "title": entity.name.0.value,
    "email": entity.field_email.0.value,
    "email_label": entity.field_email.0.fielddefinition.label,
    "contact_link_title": entity.field_contact_link.title,
    "contact_link_url": entity.field_contact_link.0.url,
    "phone" : entity.field_phone.second,
    "phone_label": phone_label,
    "phone2" : entity.field_fax.second,
    "phone2_label": fax_label,
    "link_title" : entity.field_link.title,
    "link_url" : entity.field_link.0.url,
    "location" : entity.field_location.value,
    "general_text" : entity.field_general_text.value,
    "component_base_class": 'class-contact',
    "component_modifiers": [],
    "component_blockname": '',
    'campus_map_url': campus_map,
    'campus_map_title': campus_map_title,
  } %}
</div>
